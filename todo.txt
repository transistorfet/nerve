
* make a widgets system for the various "hmi-like" elements.  The nerve-button, nerve-query, nerve-query-block things are essentially widgets, but
  it'd be nice to group everything together a bit better.  You could then have more advanced widgets for things like a player control
* you could have a remote control app where you can configure which widgets or blocks of widgets should appear (kind of like how it used to be
  in the android app).  You could have a 'customize' mode where it shows a button to remove widgets/panels, or add them using a list

* i can tell that at some point you're going to need a user system of some kind.  Each user could have their own custom remote controls and themes

* make it possible to do multiple queries at once, particularly with http, so that all data fetches on an html page can be updated at once
* add a redirect function or something to controller, for example /config/ (which calls index()) redirects to /config/view
* how do you get the propername of a setting, for display in the config page

* you need a better way for controllers to return or control error message returns...

* should you have a means of registering types (server, device, controller)?  You'd kind of have to import all the right modules first, and have them register

* perhaps you could make it so that servers can be individually stopped and started

* make all threads use the same method of invocation, if possible

* make it as much like a generic hmi/plc/data disemination/control thing as possible.  Make it so that it's easy to have it automatically
  query the server to fill in data fields.
* make it easy to datalog certain points/tags/whatever i should call them.  You should be able to log to a database of some kind... perhaps
  you'll have a common database for all datalogging, or maybe you'll have an individual one for each set of data to be logged...
  (I'm thinking of logging temperature here, and then displaying a graph somehow, or calculating trends based on the data)

* add fetching of remote uris during a query... so that local and remote data points can be accessed through the same mechanism

* add voice commands somehow, possibly through android or google web api

* the server response could be the server name (cr, lr) which can then be used as the default namespace for the xml layouts

* get vlc scrobbling working
* when vlc plays a youtube link, it converts the link to the direct link to the flv, but that link expires, and causes an error when played
* with vlc, is there a way to not receive the json when sending a command (to speed up commands)

STRUCTURAL:

POSSIBLE FEATURES:
	* you could add an auto discovery feature where the phone sends a broadcast message to the default port number and all the
	  servers respond.  It could be used for some normal operations even, and the server would just send a message back like
	  it normally would, in response to the request.  It could also be for config though, to know what servers are around
	* you could add a mechanism for registering for 'push notifications' by something like rgb.* <- wildcard so that all rgb
	  messages would be automatically sent to that endpoint

	* make it possible to paste a link (youtube video or playlist link) to play the link on the server end of things

