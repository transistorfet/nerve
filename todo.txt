
    * we have serious issues with security, re controllers specifically, but it affects everything really... all ObjectNode methods are accessible through
      the controller query (/config/get_child).  It's maybe clumbsy, but we can use our rudimentary permissions system such that do_request will only call
      a method if it was declared with @nerve.public or something might at least prevent really obvious hacks
    * add a mechanism for specifying access controls, even if it could be circumvented.  It should at least be hard to mess up the system

    * make theme user selectable somehow

    * should the name of the 'controllers' dict in servers be called something different, like 'paths' or 'handlers' or something?
    * change server's 'controllers' to 'mappings' to allow multiple parts in the path name ("/things/stuff/config" -> "config controller")

    * how should objects be configured?  A treeview of all objects; do you see all config values at once, possibly hidden, or do you
      have to click to edit, which fetches the form using ajax, you then save or cancel, and the form closes again.  You could even have
      a combination, where it shows the config values in summary, not editable, and you click to edit
    * should formview.py be configview.py?

    * in pages, can we make editpage use FormView, and savepage use config type validation?

    * there's an issue accessing google's oauth and having it redirect to an internal ip.  This prevents it from working on phone
    * could you have a redirect on jabberwocky.ca that just redirects the browser to a local address?

    * add db method to create or alter table (so that it updates existing databases automatically)
    * add PUT and DELETE request types to the http server
    * you could add something to views themselves where you specify the support files (js/css), and a parent view will integrate those into
      the final template-generated code

    * sort out how the users module is a singleton, and how eventthreadpool is a singleton; also how they are created (current just statically made in Main)
    * views should be more consistent with using str and bytes

    * more directly integrate the user system.  especially with mud, there must be much better security and access controls.  This also could apply for an
      irc device that is owned by one user and represents that user, and can only be accessed by that user
    * integrate user permissions and stuff into everything
    * make it possible for each user to customize their own views somehow (customized remote layouts)

    * should Model actually inherit from object, and Device would be an ObjectNode that's also a Model? (multiple inheritence)
    * should medialib be a model instead of a device?

    * add item count number to playlist page, and media search results page
    * add pagation to media search results (should be possible through offset/limit)
    * add full row select for playlist and media search, so you can click anywhere to check the box
    * add a loading thing to search.  You can probably just turn off display of the previous results and put a loading icon up
    * add mysensors info webpage things, means of more easily managing sensor network (like buttons to reset each device, when last msg received, etc)
    * make mud using a special module
    * add a system of notifications/messages that's global to the system but specific to a user (ie. can leave messages for individual users)
    * add irc/chat sort of things?

    * add a means of browsing (or searching) the medialib by some other means, like according to path, so that you can look at specifically
      documentary videos in the documentaries directory, for example
    * it should be possible to easily remove items from the current playlist (like delete current song/delete all by artist/delete previous song)
      The changes should take effect immediately.  Possibly could have a list of recently played songs to delete
    * you could have a playlog of recently played tracks, and then you can delete previously played items (so it should list it even if the song played for 2 sec)
    * add option to mark videos as watched/unwatched so you can easily get a list of things not yet watched
    * add a hidden flag to videos, to hide certain items from searches or from randomly generated playlists
    * make updater skip the Incomplete directory for torrents, so it doesn't add any media items it finds there
    * add a mechanism for getting high/low/average from a datalog, for convenient display on a summary
    * add is-playing animated icon next to the song title (info to be sent with getsong())
    * make it possible to paste a link (youtube video or playlist link) to play the link on the server end of things

    * make sure it creates a sane default settings file if the config dir doesn't have a file already
    * add run and config instructions to the readme (so that somebody could actually run the thing)
    * update projects website

    * make it so that if a block is renamed, it's references in page definitions is updated
    * would it be useful (or more complicated) to add a 'parent' or 'template' field to pages in the pages module, so that a parent
      page can be specified other than '__default__'?

    * use @querymethod everywhere
    * should you overload print instead of redirecting stdout in pyhtml??  This wont work for code in other files that use print, since they have the global vars of their scope
    * there needs to be a way to convert a normal module into a Module object if it contains 'get_config_data'...  Right now, only modules
      that have config data in the settings file get created as Module objects, and the rest are just regular modules
    * move module stuff to it's own file??

    * allow logging to be output to a file
    * add levels/types to log messages, and possibly add means of muting certain messages

    * for now I've made eventpool and users be simple attributes on Main, but maybe they should be added to objfs?
    * you could have tasks be added to the ObjectFS... you could have tasks be started automatically (or some tasks at least), after
      everything initializes.  Then you could have the EventThreadPool and mediaupdater threads be essentially loose threads in the system,
      started by the system, and accessible through the config system, with config options for them?... Well EventThreadPool is still
      a static object created by the system rather than a configurable object... 
    * perhaps you could make it so that servers can be individually stopped and started

    * implement symbolic link style redirect.  It has to be really versitile...  Right now it doesn't work with remote references because
      it implements the getattr, so it has to be able to reference a real object.  It's possible to create a special redirect object though,
      that's returned when trying to get any subobject from a SymbolicLink object, or AliasObject??
    * fix query() to do something consistent with the arguments passed to it when for an HTTP request in particular.
    * in Request, should the parser only de-listify the query string arguments rather than also doing the ones passed by kwargs?  I guess
      in a POST received from the server, it will pass already parsed kwargs to Request, and they might not be de-listified?  What affect
      would this have on arguments passed through query via a call?
    * should you change as many private variables to _leading notation?  I've already done this for ObjectNode because self.config was conflicting
      with path names used by controllers.  In light of the filter that prevents _leading queries to be issued, this might be effective at
      enforcing attribute access permissions.  This rule could be enforced more strictly
    * re-evaluate use of getattr for getting objects on ObjectNode and stuff... does it cause too many potential conflicts? or does
      it simplify objects such as Main where attributes are directly on the object but should also be accessible through the ObjectNode
      system
    * make sure when loading config with saved module data that it gets used

    * A connection could be either text/plain (line terminated), application/json (messages), or possibly text/html, which would be similar to
      text/plain but allow html tags in the stream.  Sort out how connections negotiate mimetype of messages, and how messages are structured
    * could you make something (server or connection handler or something), that will act like a terminal, that will respond to arrow
      keys, completion, and so on, just like console does, but for tcpserver connections, and other things (even the websocket shell)
    * add command/path completion to shell

    * add SSL support to HTTP server
    * add support for running nerve using WSGI (PEP 3333), so that apache or something else can launch nerve to handle a web request.  It would
      have to bypass the normal main loop, but that should be doable by not creating Main(), creating a different class like Main()
    * make more advanced widgets for various things (ideas?)
    * there could be a way to automatically minify js and css files on the fly
    * add support for multiline comments in pyhtml

    * add module that can maximize a particular window (like firefox), and then have a means of programming mouse clicks on the screen and mapping
      them to queries, so that a nerve button can cause that mouse click to happen, with the window focused and maximized.  You could also click an
      area, and if the colour of that pixel is a certain one, then return true instead of false (eg. a play/pause status indicator that uses some kind
      of html element to drive it).  The ease of programmability of this is the key to it being usable

    * add voice commands or clapping commands (beepish?).  Only critical controls are needed, like play/pause, skip, volume up/down

    * make it as much like a generic hmi/plc/data disemination/control thing as possible.  Make it so that it's easy to have it automatically
      query the server to fill in data fields.


STRUCTURAL/REFACTORING:

    * change module type references to include the '/modules/' part
    * how should view files be referenced relative to?  Right now it's nerve/module/views/view.pyhtml but it should be easier to reference
      the parent module (so the code doesn't have that hardcoded) and also how will this work with the possibility of a second module location
    * if you convert jquery files to send post requests as json, then it will preserve the numeric/string type distinction.  Without it,
      any method called through that mechanism must be cognizant and convert strings to numeric if needed.

    * should devices, at least their source files, be renamed drivers?  Basically the class/definition is the driver and the instantiated
      object itself is the device
    * make all threads use the same method of invocation, if possible??  Or at least clean them up a bit

    * perhaps PyHTML could be renamed PyHP, or the filename extension could be .pyhp so it's a bit shorter or something


BUGS:
    * it's possible to enter anything after a url.  It doesn't throw an error, which it probably should (a 404 error), but some things use
      this feature to implement subreferences


ANDROID:
    * change the theme of the preferences to be the dark android theme
    * try to move settings button/action bar into bottom bar, or something... maybe you can make it hide itself
    * add a refresh button to the menu, to reload the current page


ARDUINO:
    * add a query discovery thing to nerve serial devices to get the list of queries that device can respond to
    * should you switch to sending queries as query strings instead of as positional arguments?
    * add share-to link, so that in other apps, you can share a link to nerve, which sends the link to the server to eg. enqueue a youtube link


OTHER APPLICATIONS:
    * when vlc plays a youtube link, it converts the link to the direct link to the flv, but that link expires, and causes an error when played
    * with vlc, is there a way to not receive the json when sending a command (to speed up commands)


POSSIBLE FEATURES:
    * you could add an auto discovery feature where the phone sends a broadcast message to the default port number and all the
      servers respond.  It could be used for some normal operations even, and the server would just send a message back like
      it normally would, in response to the request.  It could also be for config though, to know what servers are around
    * you could add a mechanism for registering for 'push notifications' by something like rgb.* <- wildcard so that all rgb
      messages would be automatically sent to that endpoint

    * make a vlc extension that interacts better with nerve, particularly being able to push media info to nerve
    * how possible would it be to make like a gtk app window to act as a player control.  I'm thinking if vlc was replaced with
      gstreamer, we'd still want the player window, with any video to be played (basically like the ob gtk thing)

    * for an IR/Remote Control Emulation type device, you could program the system such that... you take a picture of the remote
      control you're adding, you could take a picture on your phone of the remote control (maybe there could be image recognition
      to break it into buttons, or else you can indicate with a mouse box).  You'd then click on each button in the picture with
      the computer mouse or touch, and then it waits for an IR code, which you can then press on the remote, and it will record
      what button produces what code for each button.  You can then refer to that table to send the code you want (somehow)

    * make it so that you can basically save your spot watching a movie (or playlist), and then restore it, like switching contexts.  This
      would be most handy when watching F1 stuff, but I want to switch to music for a bit, and then later continue watching F1
    * make a mysensors node for the fridge to monitor temperature

    * you could have some system to assign a mood or energy level to a song, possibly something automatic or something manually
      assigned (or at the least manually adjustable).  Then you can randomly generate a playlist using certain rules of what
      types of songs should come after which, to more intelligently currate a playlist.  It could also use data from the
      environment to select songs to play.
    * a datasource that gives you information on the phases of the moon, position of planets, possibly space weather and so on

    * irc server (or device driver) that reports on data of IRC server, recently said things in particular channels, and possibly also an
      interface so users on IRC can query things inside nerve (a controller running on the IRC connection)
    * add recognition of clapping signals (beepish?) and/or voice commands to control things
    * add gstreamer media player (the big thing is how difficult would it be to make gstreamer play youtube files?)



DONE?:
    * I'm thinking about a widgets system as a generalized concept for building web-based views, like the remote control page now, or
      for example, a page that displays weather/temp and various daily info type stuff, a page at a glance.  It might be reasonably
      easy/possible to have all 'pages' be a collection of widgets (which they already are in an HTML sense, but there could be an editor
      for it, so there'd have to be some generic way of declaring all the widgety parts needed).  Everything would be a widget like it is
      now (the buttons and editor and stuff), but the view/assets/controller part of datalog would also be a single-ish widget, and you could
      make widgets of widgets (the collection of buttons for a media player, or for a lights control), etc etc.  The page editor thing would
      then allow you to select widgets from a list to place, specify config options for those widgtes (like the data query of a button, or
      the device that a player control widget should talk to).  I guess the pages could be stored in HTML directly, since it's possible to
      parse what's needed easily enough in python, but it could also be stored in the settings file (maybe shouldn't rely so much on that...
      separate files are easier to mix and backup and edit manually than one big file).  Advanced mode then would be HTML editing?  That is
      to say, the actual specification and configuration of the widget is always and only in the HTML file, and the rest of it (css, js,
      controller, additional view pyhtml) would automatically work?  Can that work and can it be good enough without being too complicated?

