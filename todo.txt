    <script type="text/javascript" src="/base/assets/js/widgets.js"></script>
    <script type="text/javascript" src="/base/assets/js/config.js"></script>

    <script type="text/javascript" src="/base/js/widgets.js"></script>
    <script type="text/javascript" src="/base/js/config.js"></script>

    <script type="text/javascript" src="/assets/base/js/widgets.js"></script>
    <script type="text/javascript" src="/assets/base/js/config.js"></script>

* how should asset files be references (as well as view files).  What should the root dir be, especially if we have a place for extended code in the config dir.
  Should references be agnostic as to where the module is located?  Which of the above examples looks and means the best?  What is the most logical format given
  how a controller can serve up those files.  Should there be a special assets-server-uper in each controller?  It wouldn't add much overhead I don't think.  You'd
  just have a function in the controller called assets(self, request), which would then call a method to load any files in the local assets directory.  We wouldn't
  need a seperate special controller to serve up assets at all.  We'd just need to move the code in FileController to a common location like the Controller class
  itself (I figure it's a generic enough function that it can go there instead of on the http controller)
* make thing to be able to specify js and css files.  Also move the files into the modules directory
* change module type references to include the '/modules/' part
* do you have a special ObjectNode object for each module, or just the module variable itself?  How do objects with objects work? Like the Modules class itself...
  It has subobjects but they are 'virtually created' (not saved in the settings file)
* implement symbolic link style redirect.  It has to be really versitile...
* it's possible to enter anything after a url.  It doesn't throw an error, which it probably should (a 404 error)

* you could have one updater thread and multiple 'updater/fetchers' or something rather than a thread for each, or possible some other
  way to make sure they don't all run at the same time
* rules, routines, events, triggers... these are various names that other systems have for basically making something happen when
  certain conditions are met.  I need something like this, which would provide the thread that would handle something happening, like
  an ir code being received through serial.  I still don't know how the serial thread will deal with receiving those unrequested messages,
  but this would be the general mechanism by which the system could do something in response (the mapping between a given ircode and
  the various things that get controller)
* of course, this mechanism would have means of doing complex stuff as well, like time delays and that.  It will just use python code to
  define the behaviour for now, and that could possibly be extended to a more user friendly system later on

* fix the race condition in console better

* add run and config instructions to the readme (so that somebody could actually run the thing)
* should the name of the 'controllers' dict in servers be called something different, like 'paths' or 'handlers' or something?

* add movies to the thing somehow.  ID3 tags don't really work, so it'd have to fill in the data on it's own somehow
* add a means of browsing (or searching) the medialib by some other means, like according to path, so that you can look at specifically
  documentary videos in the documentaries directory, for example

* it should be possible to easily remove items from the current playlist (like delete current song/delete all by artist/delete previous song)
  The changes should take effect immediately.  Possibly could have a list of recently played songs to delete
* there should be better handling of audio vs video

* get savable config page working
* the file controller doesn't properly return an error message when a file isn't found, since it doesn't throw an exception
* change all code to use super() instead of referring to the class (maybe?)
* if you have a function somewhere to handle js and css files... not only could you put them in the module directory, but you could auto minify and cache them too

* add a query discovery thing to nerve serial devices to get the list of queries

* add is-playing animated icon next to the song title (info to be sent with getsong())
* make it possible to paste a link (youtube video or playlist link) to play the link on the server end of things

* should devices, at least their source files, be renamed drivers?  Basically the class/definition is the driver and the instantiated
  object itself is the device

* add the ability to make some kind of timed scripted event thing... I'm thinking like a particular pattern being played on rgb node
  without it being programmed into the device itself... like "rgb/fade ff0000 10s; delay 15s; rgb/fade 00ff00 10s; ..."

* resolve the issue of config_info, and whether you call it once or call it all the time... whether you have to do it for each object individually, or if you can make
  that function recursive
* make all threads use the same method of invocation, if possible
* perhaps you could make it so that servers can be individually stopped and started

* make more advanced widgets for various things (ideas?)
* possibly have more specific widgets like one for a player, etc
* you could have a remote control app where you can configure which widgets or blocks of widgets should appear (kind of like how it used to be
  in the android app).  You could have a 'customize' mode where it shows a button to remove widgets/panels, or add them using a list

* add a theme system
* add a user system.  Users can have their own themes, remote control layouts, and so on

* make it as much like a generic hmi/plc/data disemination/control thing as possible.  Make it so that it's easy to have it automatically
  query the server to fill in data fields.


ANDROID:
    * change the theme of the preferences to be the dark android theme
    * try to move settings button/action bar into bottom bar, or something... maybe you can make it hide itself

MISC:
    * when vlc plays a youtube link, it converts the link to the direct link to the flv, but that link expires, and causes an error when played
    * with vlc, is there a way to not receive the json when sending a command (to speed up commands)

STRUCTURAL:

POSSIBLE FEATURES:
    * you could add an auto discovery feature where the phone sends a broadcast message to the default port number and all the
      servers respond.  It could be used for some normal operations even, and the server would just send a message back like
      it normally would, in response to the request.  It could also be for config though, to know what servers are around
    * you could add a mechanism for registering for 'push notifications' by something like rgb.* <- wildcard so that all rgb
      messages would be automatically sent to that endpoint

    * for an IR/Remote Control Emulation type device, you could program the system such that... you take a picture of the remote
      control you're adding, you could take a picture on your phone of the remote control (maybe there could be image recognition
      to break it into buttons, or else you can indicate with a mouse box).  You'd then click on each button in the picture with
      the computer mouse or touch, and then it waits for an IR code, which you can then press on the remote, and it will record
      what button produces what code for each button.  You can then refer to that table to send the code you want (somehow)

    * make a vlc extension that interacts better with nerve, particularly being able to push media info to nerve

    * how possible would it be to make like a gtk app window to act as a player control.  I'm thinking if vlc was replaced with
      gstreamer, we'd still want the player window, with any video to be played (basically like the ob gtk thing)

