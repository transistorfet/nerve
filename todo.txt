
* I'm thinking about a widgets system as a generalized concept for building web-based views, like the remote control page now, or
  for example, a page that displays weather/temp and various daily info type stuff, a page at a glance.  It might be reasonably
  easy/possible to have all 'pages' be a collection of widgets (which they already are in an HTML sense, but there could be an editor
  for it, so there'd have to be some generic way of declaring all the widgety parts needed).  Everything would be a widget like it is
  now (the buttons and editor and stuff), but the view/assets/controller part of datalog would also be a single-ish widget, and you could
  make widgets of widgets (the collection of buttons for a media player, or for a lights control), etc etc.  The page editor thing would
  then allow you to select widgets from a list to place, specify config options for those widgtes (like the data query of a button, or
  the device that a player control widget should talk to).  I guess the pages could be stored in HTML directly, since it's possible to
  parse what's needed easily enough in python, but it could also be stored in the settings file (maybe shouldn't rely so much on that...
  separate files are easier to mix and backup and edit manually than one big file).  Advanced mode then would be HTML editing?  That is
  to say, the actual specification and configuration of the widget is always and only in the HTML file, and the rest of it (css, js,
  controller, additional view pyhtml) would automatically work?  Can that work and can it be good enough without being too complicated?

* change module type references to include the '/modules/' part
* implement symbolic link style redirect.  It has to be really versitile...  Right now it doesn't work with remote references because
  it implements the getattr, so it has to be able to reference a real object.  It's possible to create a special redirect object though,
  that's returned when trying to get any subobject from a SymbolicLink object
* it's possible to enter anything after a url.  It doesn't throw an error, which it probably should (a 404 error), but some things use
  this feature to implement subreferences

* make it so that you can basically save your spot watching a movie (or playlist), and then restore it, like switching contexts.  This
  would be most handy when watching F1 stuff, but I want to switch to music for a bit, and then later continue watching F1
* you could have one updater thread and multiple 'updater/fetchers' or something rather than a thread for each, or possible some other
  way to make sure they don't all run at the same time
* add a means of browsing (or searching) the medialib by some other means, like according to path, so that you can look at specifically
  documentary videos in the documentaries directory, for example
* it should be possible to easily remove items from the current playlist (like delete current song/delete all by artist/delete previous song)
  The changes should take effect immediately.  Possibly could have a list of recently played songs to delete

* add a query discovery thing to nerve serial devices to get the list of queries
* fix the race condition in console better

* add run and config instructions to the readme (so that somebody could actually run the thing)
* should the name of the 'controllers' dict in servers be called something different, like 'paths' or 'handlers' or something?

* the file controller doesn't properly return an error message when a file isn't found, since it doesn't throw an exception
* change all code to use super() instead of referring to the class (maybe?)
* how should view files be referenced relative to?  Right now it's nerve/module/views/view.pyhtml but it should be easier to reference
  the parent module (so the code doesn't have that hardcoded) and also how will this work with the possibility of a second module location

* add is-playing animated icon next to the song title (info to be sent with getsong())
* make it possible to paste a link (youtube video or playlist link) to play the link on the server end of things

* should devices, at least their source files, be renamed drivers?  Basically the class/definition is the driver and the instantiated
  object itself is the device

* make all threads use the same method of invocation, if possible
* perhaps you could make it so that servers can be individually stopped and started

* make more advanced widgets for various things (ideas?)
* possibly have more specific widgets like one for a player, etc
* you could have a remote control app where you can configure which widgets or blocks of widgets should appear (kind of like how it used to be
  in the android app).  You could have a 'customize' mode where it shows a button to remove widgets/panels, or add them using a list
* there could be a way to automatically minify js and css files on the fly

* add a theme system
* add a user system.  Users can have their own themes, remote control layouts, and so on
* make thing to be able to specify js and css files

* make it as much like a generic hmi/plc/data disemination/control thing as possible.  Make it so that it's easy to have it automatically
  query the server to fill in data fields.


ANDROID:
    * change the theme of the preferences to be the dark android theme
    * try to move settings button/action bar into bottom bar, or something... maybe you can make it hide itself

MISC:
    * when vlc plays a youtube link, it converts the link to the direct link to the flv, but that link expires, and causes an error when played
    * with vlc, is there a way to not receive the json when sending a command (to speed up commands)

STRUCTURAL:

POSSIBLE FEATURES:
    * you could add an auto discovery feature where the phone sends a broadcast message to the default port number and all the
      servers respond.  It could be used for some normal operations even, and the server would just send a message back like
      it normally would, in response to the request.  It could also be for config though, to know what servers are around
    * you could add a mechanism for registering for 'push notifications' by something like rgb.* <- wildcard so that all rgb
      messages would be automatically sent to that endpoint

    * for an IR/Remote Control Emulation type device, you could program the system such that... you take a picture of the remote
      control you're adding, you could take a picture on your phone of the remote control (maybe there could be image recognition
      to break it into buttons, or else you can indicate with a mouse box).  You'd then click on each button in the picture with
      the computer mouse or touch, and then it waits for an IR code, which you can then press on the remote, and it will record
      what button produces what code for each button.  You can then refer to that table to send the code you want (somehow)

    * make a vlc extension that interacts better with nerve, particularly being able to push media info to nerve

    * how possible would it be to make like a gtk app window to act as a player control.  I'm thinking if vlc was replaced with
      gstreamer, we'd still want the player window, with any video to be played (basically like the ob gtk thing)

